openapi: '3.0.3'
info:
  version: '0.1.0'
  title: Gamification API
  description: API of our gamification
security:
  #  - bearerAuth: []
  - apiKeyAuth: []
paths:
  /badges:
    post:
      description: create a badge
      operationId: createBadge
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '201':
          description: created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      description: get the list of badges
      operationId: getBadges
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /badges/{id}:
    get:
      description: get one badge, by id
      operationId: getBadge
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Badge'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /pointScales:
    post:
      description: create a pointScale
      operationId: createPointScale
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PointScale'
      responses:
        '201':
          description: created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      description: get the list of pointScales
      operationId: getPointScales
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointScale'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /pointScales/{id}:
    get:
      description: get one pointScale, by id
      operationId: getPointScale
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PointScale'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /registration:
    post:
      description: registrate application
      operationId: registerApplication
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ApiKey'
  /events:
    post:
      description: process an event
      operationId: eventProcess
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: processed
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /rules:
    post:
      description: create a rule
      operationId: createRule
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '201':
          description: created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      description: get the list of rules
      operationId: getRules
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /rules/{id}:
    get:
      description: get one rule, by id
      operationId: getRule
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Rule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'


components:
  securitySchemes:
    #    bearerAuth:            # arbitrary name for the security scheme
    #      type: http
    #      scheme: bearer       # warning: it HAS TO be a lowercase b for the swagger ui version used in springfox
    #      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  schemas:
    PointScale:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Badge:
      type: object
      properties:
        name:
          type: string
        obtainedDate:
          type: string
          format: date
        imageUrl:
          type: string
          nullable: true
    Event:
      type: object
      properties:
        userId:
          type: string
        timestamp:
          type: string
          format: date-time
        type:
          type: string
    Rule:
      type: object
      properties:
        if:
          type: object
          properties:
            type:
              type: string
        then:
          type: object
          properties:
            awardBadge:
              type: string
              format: uri
            awardPoints:
              type: object
              properties:
                pointScale:
                  type: string
                  format: uri
                amount:
                  type: integer
    ApiKey:
      type: object
      properties:
        value:
          type: string
          format: uuid