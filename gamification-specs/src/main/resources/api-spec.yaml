openapi: '3.0.3'
info:
  version: '0.1.0'
  title: Gamification API
  description: API of our gamification
security:
  #  - bearerAuth: []
  - apiKeyAuth: []
paths:
  /badges:
    post:
      description: create a badge
      operationId: createBadge
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '201':
          description: created
        '400':
          description: bad request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/APIError'
              examples:
                nameEmpty:
                  summary: Example of an error response
                  value:
                    'Name is empty'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      description: get the list of badges
      operationId: getBadges
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadgeResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /badges/{id}:
    get:
      description: get one badge, by id
      operationId: getBadge
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The id of a specific badge
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BadgeResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: not found
    patch:
      description: Update a specific badge
      operationId: patchBadge
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The id of a specific badge
      requestBody:
        required: true
        content:
          'application/json-patch+json':
            schema:
              $ref: '#/components/schemas/PatchBody'
      responses:
        '200':
          description: success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
  /pointScales:
    post:
      description: create a pointScale
      operationId: createPointScale
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PointScale'
      responses:
        '201':
          description: created
        '400':
          description: bad request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/APIError'
              examples:
                nameEmpty:
                  summary: Example of an error response
                  value:
                    'Name is empty'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      description: get the list of pointScales
      operationId: getPointScales
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointScaleResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /pointScales/{id}:
    get:
      description: get one pointScale, by id
      operationId: getPointScale
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PointScaleResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: not found
    patch:
      description: Update a specific pointScale
      operationId: patchPointScale
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The id of a specific pointScale
      requestBody:
        required: true
        content:
          'application/json-patch+json':
            schema:
              $ref: '#/components/schemas/PatchBody'
      responses:
        '200':
          description: success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
  /registration:
    post:
      description: registrate application
      operationId: registerApplication
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ApiKey'
  /events:
    post:
      description: process an event
      operationId: eventProcess
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: success
        '400':
          description: bad request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/APIError'
              examples:
                nameEmpty:
                  summary: Example of an error response
                  value:
                    'UserId is empty'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /rules:
    post:
      description: create a rule
      operationId: createRule
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '201':
          description: created
        '400':
          description: bad request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/APIError'
              examples:
                nameEmpty:
                  summary: Example of an error response
                  value:
                    'Type is empty'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: conflict with existing rule
    get:
      description: get the list of rules
      operationId: getRules
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /rules/{id}:
    get:
      description: get one rule, by id
      operationId: getRule
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Rule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: not found
  /users:
    get:
      description: get the list of users
      operationId: getUsers
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users/{id}:
    get:
      description: get one user, by id
      operationId: getUser
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: not found
  /leaderboards/{limit}:
    get:
      description: get all the leaderboards
      operationId: getLeaderboards
      parameters:
        - in: path
          name: limit
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointScaleLeaderboard'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /leaderboards/pointScales/{id}/{limit}:
    get:
      description: get one leaderboard, by pointScale id
      operationId: getPointScaleLeaderboard
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: limit
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PointScaleLeaderboard'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: not found


components:
  securitySchemes:
    #    bearerAuth:            # arbitrary name for the security scheme
    #      type: http
    #      scheme: bearer       # warning: it HAS TO be a lowercase b for the swagger ui version used in springfox
    #      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  requestBodies:
    patchBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PatchBody'
  schemas:
    PointScale:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    APIError:
      type: object
      properties:
        msg:
          type: string
    PointScaleResponse:
      allOf:
        - $ref: '#/components/schemas/PointScale'
        - type: object
          properties:
            links:
              type: array
              items:
                $ref: '#/components/schemas/Link'
    Badge:
      type: object
      properties:
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
    BadgeResponse:
      allOf:
        - $ref: '#/components/schemas/Badge'
        - type: object
          properties:
            links:
              type: array
              items:
                $ref: '#/components/schemas/Link'
    Event:
      type: object
      properties:
        userId:
          type: string
        timestamp:
          type: string
          format: date-time
        type:
          type: string
    Rule:
      type: object
      properties:
        if:
          type: object
          properties:
            type:
              type: string
        then:
          type: object
          properties:
            awardBadge:
              type: string
              format: uri
            awardPoints:
              type: object
              properties:
                pointScale:
                  type: string
                  format: uri
                amount:
                  type: integer
    User:
      type: object
      properties:
        id:
          type: string
        badgesAwards:
          type: array
          items:
            $ref: '#/components/schemas/BadgeAward'
        pointsAwards:
          type: array
          items:
            $ref: '#/components/schemas/PointscaleAward'
    Award:
      type: object
      properties:
        reason:
          type: string
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          format: uri
    BadgeAward:
      allOf:
        - $ref: '#/components/schemas/Award'
    PointscaleAward:
      allOf:
        - $ref: '#/components/schemas/Award'
      properties:
        amount:
          type: integer
    PointScaleLeaderboard:
      type: object
      properties:
        name:
          type: string
        leaderboard:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              totalPoints:
                type: integer
    ApiKey:
      type: object
      properties:
        value:
          type: string
          format: uuid
    Link:
      type: object
      properties:
        self:
          type: string
          format: uri
    # Reference https://stackoverflow.com/a/57511258/14447504
    PatchBody:
      type: array
      items:
        $ref: "#/components/schemas/JsonPatchDocument"
    JsonPatchDocument:
      type: object
      description: A JSONPatch document as defined by RFC 6902
      required:
        - "op"
        - "path"
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - "replace"
        path:
          type: string
          description: A JSON-Pointer
        value:
          type: object
          description: The value to be used within the operations.