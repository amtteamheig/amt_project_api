openapi: '3.0.3'
info:
  version: '0.1.0'
  title: Gamification API
  description: API of our gamification
security:
  - apiKeyAuth: []
errors:
  badges:
    NameIsEmpty:
      description: Name is empty
    ObtainedDateIsEmpty:
      description: ObtainedDate is empty
  pointScales:
    NameIsEmpty:
      description: Name is empty
    DescriptionIsEmpty:
      description: Description is empty
  events:
    UserIdIsEmpty:
      description: UserID is empty
    TimestampIsEmpty:
      description: TimeStamp is empty
    TypeIsEmpty:
      description: Type is empty
  rules:
    if:
      TypeIsEmpty:
        description: Type of If is empty
    then:
      AwardBadgeIsEmpty:
        description: AwardBadge of Then is empty
      awardPoints:
        PointScaleIsEmpty:
          description: PointScale of AwardPoints of Then is empty
paths:
  /badges:
    post:
      description: create a badge
      operationId: createBadge
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '201':
          description: created
        '400':
          description: bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: '#/errors/badges/NameIsEmpty'
                  - $ref: '#/errors/badges/ObtainedDateIsEmpty'
              examples:
                nameEmpty:
                  summary: Example of an error response
                  value:
                    $ref: '#/errors/badges/NameIsEmpty'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      description: get the list of badges
      operationId: getBadges
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /badges/{id}:
    get:
      description: get one badge, by id
      operationId: getBadge
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Badge'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /pointScales:
    post:
      description: create a pointScale
      operationId: createPointScale
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PointScale'
      responses:
        '201':
          description: created
        '400':
          description: bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: '#/errors/pointScales/NameIsEmpty'
                  - $ref: '#/errors/pointScales/DescriptionIsEmpty'
              examples:
                nameEmpty:
                  summary: Example of an error response
                  value:
                    $ref: '#/errors/pointScales/NameIsEmpty'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      description: get the list of pointScales
      operationId: getPointScales
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointScale'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /pointScales/{id}:
    get:
      description: get one pointScale, by id
      operationId: getPointScale
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PointScale'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /registration:
    post:
      description: registrate application
      operationId: registerApplication
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ApiKey'
  /events:
    post:
      description: process an event
      operationId: eventProcess
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: success
        '400':
          description: bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: '#/errors/events/UserIdIsEmpty'
                  - $ref: '#/errors/events/TimestampIsEmpty'
                  - $ref: '#/errors/events/TypeIsEmpty'
              examples:
                nameEmpty:
                  summary: Example of an error response
                  value:
                    $ref: '#/errors/events/UserIdIsEmpty'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /rules:
    post:
      description: create a rule
      operationId: createRule
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '201':
          description: created
        '400':
          description: bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: '#/errors/rules/if/TypeIsEmpty'
                  - $ref: '#/errors/rules/then/AwardBadgeIsEmpty'
                  - $ref: '#/errors/rules/then/awardPoints/PointScaleIsEmpty'
              examples:
                nameEmpty:
                  summary: Example of an error response
                  value:
                    $ref: '#/errors/rules/if/TypeIsEmpty'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      description: get the list of rules
      operationId: getRules
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /rules/{id}:
    get:
      description: get one rule, by id
      operationId: getRule
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Rule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /users:
    get:
      description: get the list of users
      operationId: getUsers
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users/{id}:
    get:
      description: get one user, by id
      operationId: getUser
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'


components:
  securitySchemes:
    #    bearerAuth:            # arbitrary name for the security scheme
    #      type: http
    #      scheme: bearer       # warning: it HAS TO be a lowercase b for the swagger ui version used in springfox
    #      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    NotFoundError:
      description: entity not found
  schemas:
    PointScale:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Badge:
      type: object
      properties:
        name:
          type: string
        obtainedDate:
          type: string
          format: date
        imageUrl:
          type: string
          nullable: true
    Event:
      type: object
      properties:
        userId:
          type: string
        timestamp:
          type: string
          format: date-time
        type:
          type: string
    Rule:
      type: object
      properties:
        if:
          type: object
          properties:
            type:
              type: string
        then:
          type: object
          properties:
            awardBadge:
              type: string
              format: uri
            awardPoints:
              type: object
              properties:
                pointScale:
                  type: string
                  format: uri
                amount:
                  type: integer
    User:
      type: object
      properties:
        id:
          type: string
        badges:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
        points:
          type: array
          items:
            type: object
            properties:
              pointScale:
                $ref: '#/components/schemas/PointScale'
              amount:
                type: integer
    ApiKey:
      type: object
      properties:
        value:
          type: string
          format: uuid